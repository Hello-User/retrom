syntax = "proto3";

package retrom;

import "igdb.proto";

service LibraryService {
  rpc UpdateLibrary(UpdateLibraryRequest) returns (UpdateLibraryResponse);
  rpc UpdateLibraryMetadata(UpdateLibraryMetadataRequest) returns (UpdateLibraryMetadataResponse);
  rpc DeleteLibrary(DeleteLibraryRequest) returns (DeleteLibraryResponse);
}

service PlatformService {
  rpc GetPlatforms(GetPlatformsRequest) returns (GetPlatformsResponse);
}

service GameService {
  rpc GetGames(GetGamesRequest) returns (GetGamesResponse);
}

service MetadataService {
  rpc GetGameMetadata(GetGameMetadataRequest) returns (GetGameMetadataResponse);
  rpc UpdateGameMetadata(UpdateGameMetadataRequest) returns (UpdateGameMetadataResponse);

  rpc GetPlatformMetadata(GetPlatformMetadataRequest) returns (GetPlatformMetadataResponse);
  rpc UpdatePlatformMetadata(UpdatePlatformMetadataRequest) returns (UpdatePlatformMetadataResponse);

  rpc GetIgdbSearch(GetIgdbSearchRequest) returns (GetIgdbSearchResponse);
  rpc GetIgdbGameSearchResults(GetIgdbGameSearchResultsRequest) returns (GetIgdbGameSearchResultsResponse);
  rpc GetIgdbPlatformSearchResults(GetIgdbPlatformSearchResultsRequest) returns (GetIgdbPlatformSearchResultsResponse);
}

message Platform {
  int32 id = 1;
  string path = 3;
}

message NewPlatform {
  string path = 1;
}

message UpdatedPlatform {
  int32 id = 1;
  optional string path = 2;
}

message Game {
  int32 id = 1;
  string path = 3;
  optional int32 platform_id = 4;
}

message NewGame {
  string path = 1;
  optional int32 platform_id = 2;
}

message UpdatedGame {
  int32 id = 1;
  optional string path = 2;
  optional int32 platform_id = 3;
}

message GameFile {
  int32 id = 1;
  int32 byte_size = 3;
  string path = 4;
  int32 game_id = 6;
}

message NewGameFile {
  int32 byte_size = 1;
  string path = 2;
  optional int32 game_id = 3;
}

message UpdatedGameFile {
  int32 id = 1;
  optional int32 byte_size = 2;
  optional string path = 3;
  optional int32 game_id = 4;
}

message GameMetadata {
  int32 game_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string cover_url = 4;
  optional string background_url = 5;
  optional string icon_url = 6;
  optional int64 igdb_id = 7;
}

message NewGameMetadata {
  optional int32 game_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string cover_url = 4;
  optional string background_url = 5;
  optional string icon_url = 6;
  optional int64 igdb_id = 7;
}

message UpdatedGameMetadata {
  int32 game_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string cover_url = 4;
  optional string background_url = 5;
  optional string icon_url = 6;
  optional int64 igdb_id = 7;
}

message PlatformMetadata {
  int32 platform_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string background_url = 4;
  optional string logo_url = 5;
  optional int64 igdb_id = 6;
}

message NewPlatformMetadata {
  optional int32 platform_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string background_url = 4;
  optional string logo_url = 5;
  optional int64 igdb_id = 6;
}

message UpdatedPlatformMetadata {
  int32 platform_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string background_url = 4;
  optional string logo_url = 5;
  optional int64 igdb_id = 6;
}

message UpdateLibraryRequest {}

message UpdateLibraryResponse {
  repeated Platform platforms_populated = 1;
  repeated Game games_populated = 2;
  repeated GameFile game_files_populated = 3;
}

message UpdateLibraryMetadataRequest {
  optional bool overwrite = 1;
}

message UpdateLibraryMetadataResponse {
  repeated GameMetadata game_metadata_populated = 1;
  repeated PlatformMetadata platform_metadata_populated = 2;
}

message GetPlatformsRequest {
  repeated int32 ids = 1;
  optional bool with_metadata = 2;
}

message GetPlatformsResponse {
  repeated Platform platforms = 1;
  repeated PlatformMetadata metadata = 2;
}

message GetGamesRequest {
  repeated int32 platform_ids = 1;
  repeated int32 ids = 2;
  optional bool with_metadata = 3;
  optional bool with_files = 4;
}

message GetGamesResponse {
  repeated Game games = 1;
  repeated GameMetadata metadata = 2;
  repeated GameFile game_files = 3;
}

message GetGameMetadataRequest {
  repeated int32 game_ids = 1;
}

message GetGameMetadataResponse {
  repeated GameMetadata metadata = 1;
}

message GetPlatformMetadataRequest {
  repeated int32 platform_ids = 1;
}

message GetPlatformMetadataResponse {
  repeated PlatformMetadata metadata = 1;
}

message IgdbSearch {
  string value = 1;
}

message IgdbPagination {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message IgdbFilters {
  enum FilterOperator {
    EQUAL = 0;
    NOT_EQUAL = 1;
    GREATER_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
    LESS_THAN = 4;
    LESS_THAN_OR_EQUAL = 5;
    PREFIX_MATCH = 6;
    SUFFIX_MATCH = 7;
    INFIX_MATCH = 8;
  }

  message FilterValue {
    string value = 1;
    optional FilterOperator operator = 2;
  }

  // map of field name to filter operation
  map<string, FilterValue> filters = 1;
}

message IgdbFields {
  message IncludeFields {
    repeated string value = 1;
  }

  message ExcludeFields {
    repeated string value = 1;
  }

  oneof selector {
    IncludeFields include = 1;
    ExcludeFields exclude = 2;
  }
}

message IgdbGameSearchQuery {
  message Fields {
    optional uint64 id = 1;
    optional string title = 2;
    // IGDB id of the platform this game is for
    optional uint64 platform = 3;
  }

  // the retrom game id we are searching for
  int32 game_id = 1;

  IgdbSearch search = 2;
  optional Fields fields = 3;
  optional IgdbPagination pagination = 4;
}

message GetIgdbGameSearchResultsRequest {
  IgdbGameSearchQuery query = 1;
}

message GetIgdbGameSearchResultsResponse {
  repeated NewGameMetadata metadata = 1;
}

message UpdateGameMetadataRequest {
  repeated UpdatedGameMetadata metadata = 1;
}

message UpdateGameMetadataResponse {
  repeated GameMetadata metadata_updated = 1;
}

message IgdbPlatformSearchQuery {
  message Fields {
    optional uint64 id = 1;
    optional string name = 2;
  }

  // the retrom platform id we are searching for
  int32 platform_id = 1;

  IgdbSearch search = 2;
  optional Fields fields = 3;
  optional IgdbPagination pagination = 4;
}

message GetIgdbPlatformSearchResultsRequest {
  IgdbPlatformSearchQuery query = 1;
}

message GetIgdbPlatformSearchResultsResponse {
  repeated NewPlatformMetadata metadata = 1;
}

message UpdatePlatformMetadataRequest {
  repeated UpdatedPlatformMetadata metadata = 1;
}

message UpdatePlatformMetadataResponse {
  repeated PlatformMetadata metadata_updated = 1;
}

enum IgdbSearchType {
  GAME = 0;
  PLATFORM = 1;
}

// Arbitrary search query for IGDB
message GetIgdbSearchRequest {
  IgdbSearchType search_type = 1;
  optional IgdbSearch search = 2;
  optional IgdbPagination pagination = 3;
  optional IgdbFilters filters = 4;
  optional IgdbFields fields = 5;
}

message IgdbSearchGameResponse {
  repeated NewGameMetadata games = 1;
}

message IgdbSearchPlatformResponse {
  repeated NewPlatformMetadata platforms = 1;
}

message GetIgdbSearchResponse {
  oneof search_results {
    IgdbSearchGameResponse game_matches = 1;
    IgdbSearchPlatformResponse platform_matches = 2;
  }
}

message DeleteLibraryRequest {}

message DeleteLibraryResponse {}
